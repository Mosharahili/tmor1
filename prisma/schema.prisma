// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  phone         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bids          Bid[]
  wonAuctions   Auction[] @relation("AuctionWinner")
  cart          Cart?
  orders        Order[]
  walletBalance Float     @default(0)
  walletPayments WalletPayment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Auction {
  id           String   @id @default(cuid())
  title        String
  description  String
  startPrice   Float
  currentPrice Float
  startDate    DateTime
  endDate      DateTime?
  status       AuctionStatus @default(UPCOMING)
  images       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bids         Bid[]
  winner       User?    @relation("AuctionWinner", fields: [winnerId], references: [id])
  winnerId     String?
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  userId    String
  auctionId String
  user      User     @relation(fields: [userId], references: [id])
  auction   Auction  @relation(fields: [auctionId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  auctionId String?
  auction   Auction? @relation(fields: [auctionId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  price     Float
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  total        Float
  status       OrderStatus @default(PENDING)
  shippingInfo Json
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String?
  product   Product? @relation(fields: [productId], references: [id])
  auctionId String?
  auction   Auction? @relation(fields: [auctionId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  category    String
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Settings {
  id                    String   @id @default("1")
  siteName             String   @default("تمور")
  siteDescription      String   @default("منصة المزادات والمنتجات الرائدة")
  heroTitle            String   @default("مرحبا بك في تمور")
  heroDescription      String   @default("منصة المزادات والمنتجات الرائدة")
  primaryColor         String   @default("#16a34a")
  secondaryColor       String   @default("#15803d")
  showFeaturedAuctions Boolean  @default(true)
  showFeaturedProducts Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  minimumWalletDeposit Float    @default(500)
}

model WalletPayment {
  id        String   @id @default(cuid())
  paymentId String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH_ON_DELIVERY
  APPLE_PAY
  MADA
}

enum AuctionStatus {
  UPCOMING
  ACTIVE
  ENDED
}
